@@ -197,4 +196,5 @@
     "    # Write your implementation here.\n",
-    "\n",
-    "\n",
+    "    corpus_words = sorted(set(word for document in corpus for word in document))\n",
+    "    num_corpus_words = len(corpus_words)\n",
+    "    \n",
     "    # ------------------\n",
@@ -274,3 +274,9 @@
     "    # Write your implementation here.\n",
-    "\n",
+    "    M = np.zeros((num_words, num_words));\n",
+    "    word2Ind = {w: i for i, w  in enumerate(words)}\n",
+    "    \n",
+    "    for d in corpus:\n",
+    "        for i, c in enumerate(d):\n",
+    "            for o in d[i-window_size: i]+d[i+1:i+window_size+1]:\n",
+    "                M[word2Ind[c]][word2Ind[o]] +=1\n",
     "\n",
@@ -373,2 +379,4 @@
     "    \n",
+    "    svd = TruncatedSVD(n_components=k, n_iter=n_iters)\n",
+    "    M_reduced = svd.fit_transform(M)\n",
     "    \n",
@@ -437,3 +445,6 @@
     "    # Write your implementation here.\n",
-    "\n",
+    "    data = [M_reduced[word2Ind[w]] for w in words]\n",
+    "    plt.scatter(*zip(*data))\n",
+    "    for (x, y), w in zip(data, words):\n",
+    "        plt.annotate(w, xy=(x,y))\n",
     "\n",
